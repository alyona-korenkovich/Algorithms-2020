@file:Suppress("UNUSED_PARAMETER")

package lesson2

/**
 * Получение наибольшей прибыли (она же -- поиск максимального подмассива)
 * Простая
 *
 * Во входном файле с именем inputName перечислены цены на акции компании в различные (возрастающие) моменты времени
 * (каждая цена идёт с новой строки). Цена -- это целое положительное число. Пример:
 *
 * 201
 * 196
 * 190
 * 198
 * 187
 * 194
 * 193
 * 185
 *
 * Выбрать два момента времени, первый из них для покупки акций, а второй для продажи, с тем, чтобы разница
 * между ценой продажи и ценой покупки была максимально большой. Второй момент должен быть раньше первого.
 * Вернуть пару из двух моментов.
 * Каждый момент обозначается целым числом -- номер строки во входном файле, нумерация с единицы.
 * Например, для приведённого выше файла результат должен быть Pair(3, 4)
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 */
fun optimizeBuyAndSell(inputName: String): Pair<Int, Int> {
    TODO()
}

/**
 * Задача Иосифа Флафия.
 * Простая
 *
 * Образовав круг, стоят menNumber человек, пронумерованных от 1 до menNumber.
 *
 * 1 2 3
 * 8   4
 * 7 6 5
 *
 * Мы считаем от 1 до choiceInterval (например, до 5), начиная с 1-го человека по кругу.
 * Человек, на котором остановился счёт, выбывает.
 *
 * 1 2 3
 * 8   4
 * 7 6 х
 *
 * Далее счёт продолжается со следующего человека, также от 1 до choiceInterval.
 * Выбывшие при счёте пропускаются, и человек, на котором остановился счёт, выбывает.
 *
 * 1 х 3
 * 8   4
 * 7 6 Х
 *
 * Процедура повторяется, пока не останется один человек. Требуется вернуть его номер (в данном случае 3).
 *
 * 1 Х 3
 * х   4
 * 7 6 Х
 *
 * 1 Х 3
 * Х   4
 * х 6 Х
 *
 * х Х 3
 * Х   4
 * Х 6 Х
 *
 * Х Х 3
 * Х   х
 * Х 6 Х
 *
 * Х Х 3
 * Х   Х
 * Х х Х
 *
 * Общий комментарий: решение из Википедии для этой задачи принимается,
 * но приветствуется попытка решить её самостоятельно.
 */
fun josephTask(menNumber: Int, choiceInterval: Int): Int {
    TODO()
}

/**
 * Наибольшая общая подстрока.
 * Средняя
 *
 * Дано две строки, например ОБСЕРВАТОРИЯ и КОНСЕРВАТОРЫ.
 * Найти их самую длинную общую подстроку -- в примере это СЕРВАТОР.
 * Если общих подстрок нет, вернуть пустую строку.
 * При сравнении подстрок, регистр символов *имеет* значение.
 * Если имеется несколько самых длинных общих подстрок одной длины,
 * вернуть ту из них, которая встречается раньше в строке first.
 */

/*Быстродействие: O(mn)
Ресурсоёмкость: S(mn), где m и n - длины строк
 */

fun longestCommonSubstring(first: String, second: String): String {
    var maxLength = 0
    var maxI = 0

    if (first.isEmpty() || second.isEmpty()) {
        return ""
    }
    if (first == second) {
        return first
    }

    val table = arrayOfNulls<IntArray>(first.length)
    for (i in table.indices) {
        table[i] = IntArray(second.length)
        for (j in table[i]!!.indices) {
            if (first[i] == second[j]) {
                table[i]!![j] = if (i != 0 && j != 0) {
                    table[i - 1]!![j - 1] + 1
                } else {
                    1
                }
            }
            if (table[i]!![j] > maxLength) {
                maxLength = table[i]!![j]
                maxI = i
            }
        }
    }

    return first.substring(maxI - maxLength + 1, maxI + 1)
}

/**
 * Число простых чисел в интервале
 * Простая
 *
 * Рассчитать количество простых чисел в интервале от 1 до limit (включительно).
 * Если limit <= 1, вернуть результат 0.
 *
 * Справка: простым считается число, которое делится нацело только на 1 и на себя.
 * Единица простым числом не считается.
 */

/*В качестве решения используется решето Аткина
Быстродействие: O(n)
Ресурсоёмкость: S(n)
 */


fun calcPrimesNumber(limit: Int): Int {
    var count = 0
    if (limit <= 1) return 0
    if (limit >= 2) count++
    if (limit >= 3) count++
    val sieve = BooleanArray(limit)
    for (i in 0 until limit)
        sieve[i] = false
    var x = 1
    while (x * x < limit) {
        var y = 1
        while (y * y < limit) {
            var n = (4 * x * x) + (y * y)
            if (n <= limit && (n % 12 == 1 || n % 12 == 5))
                sieve[n] = sieve[n] xor true
            n = (3 * x * x) + (y * y)
            if (n <= limit && n % 12 == 7)
                sieve[n] = sieve[n] xor true
            n = (3 * x * x) - (y * y)
            if (x > y && n <= limit && n % 12 == 11)
                sieve[n] = sieve[n] xor true
            y++
        }
        x++
    }
    var r = 5
    while (r * r < limit) {
        if (sieve[r]) {
            var i = r * r
            while (i < limit) {
                sieve[i] = false
                i += r * r
            }
        }
        r++
    }
    for (a in 5 until limit)
        if (sieve[a]) count++
    return count
}